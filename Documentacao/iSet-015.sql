-- MySQL Script generated by MySQL Workbench
-- Mon Mar 17 16:32:40 2025
-- Model: iSet-015    Version: 1.0
-- MySQL by José Francisco Jardim

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema iSet
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema iSet
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `iSet` ;
USE `iSet` ;


1 - 'nosfcj/iSet/api/src/models/Orgao.ts':
Nome da entidade mudará para 'nosfcj/iSet/api/src/models/Unidade.ts':
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Unidade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Unidade` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status atual do órgão no sistema: 0 - inativo, 1 - ativo',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome do órgão no sistema.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre as unidades disponíveis, que podem ser órgão, departamentos e afins que estão disponíveis para  informações e/ou prestações de serviços.';

2 - 'nosfcj/iSet/api/src/models/Servico.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Servico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Servico` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL COMMENT 'Define status do serviço: 0 - desativado, 1 - disponível',
  `titulo` VARCHAR(255) NOT NULL COMMENT 'Título do serviço disponibilizado',
  `rotulo` VARCHAR(5) NULL COMMENT 'Rótulo, no formato \'LLLLL\', que irá compor a identificação da senha no ticket.',
  `Unidade_ID` INT NOT NULL COMMENT 'Unidade que este serviço pertence.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Servico_Unidade1_idx` (`Unidade_ID` ASC) VISIBLE,
  UNIQUE INDEX `rotulo_UNIQUE` (`rotulo` ASC) VISIBLE,
  CONSTRAINT `fk_Servico_Unidade1`
    FOREIGN KEY (`Unidade_ID`)
    REFERENCES `iSet`.`Unidade` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre os serviços que serão oferecidos ao cidadão.';


3 - 'nosfcj/iSet/api/src/models/Agregador.ts':
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Agregador`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Agregador` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL COMMENT 'Status que define situação do agregador de serviços: 0 - desativado, 1 - ativado. Quando esse agregador estiver desativado, todos os serviços pertencentes ao agregador, bem como seus SubAgregados, serão desativados.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome do agregador de subAgregador.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações de agrupador de SubAgregados.';


4 - 'nosfcj/iSet/api/src/models/SubAgregador.ts':
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`SubAgregador`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`SubAgregador` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define situação do sub-agregador disponibilizados pelo agregador: 0 - desativado, 1 ativado. Quando um agregador for desativado, todos os serviços da unidade desse subagregador, bem como todos os serviços deverão ser desativados.',
  `nome` TEXT NOT NULL COMMENT 'Nome do agregador',
  `Agregador_ID` INT NOT NULL COMMENT 'Agregador a qual este SubAgregador pertence.',
  PRIMARY KEY (`ID`),
  INDEX `fk_SubAgregado_Agregador1_idx` (`Agregador_ID` ASC) VISIBLE,
  CONSTRAINT `fk_SubAgregado_Agregador1`
    FOREIGN KEY (`Agregador_ID`)
    REFERENCES `iSet`.`Agregador` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contem informações sobre os agrupamentos pertencentes a um local agregador, como divisões de uma central de atendimento.';


5 - 'nosfcj/iSet/api/src/models/Cidade.ts':
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Cidade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Cidade` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define a cidade no sistema: 0 - inativo, 1 ativo.',
  `nome` TEXT NOT NULL COMMENT 'Nome da cidade.',
  `Estado` TEXT NOT NULL COMMENT 'Nome do estado.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


6 - 'nosfcj/iSet/api/src/models/Local.ts':
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Local`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Local` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define local de um serviço disponibilizados: 0 - desatvado, 1- ativado. Quando todos os locais de um orgão estiverem desativados, o órgão também será.',
  `endereco` TEXT NULL DEFAULT NULL COMMENT 'Endereço do local em que um serviço será disponibilizado para atendimento.',
  `linkMaps` TEXT NULL DEFAULT NULL COMMENT 'Link com endereço disponível no Google Maps.',
  `telefone` TEXT NULL DEFAULT NULL COMMENT 'Telefone usado pelo órgão nesse determinado local, podendo ter vários, separados por ponto e virgula. Telefones com * no início estarão disponíveis no WhatsApp.',
  `CEP` VARCHAR(15) NULL DEFAULT NULL COMMENT 'Contém o CEP do local de atendimento do serviço.',
  `Unidade_ID` INT NOT NULL COMMENT 'Local a qual a unidade pertence.',
  `Cidade_ID` INT NOT NULL COMMENT 'Cidade na qual o local está.',
  `SubAgregado_ID` INT NOT NULL COMMENT 'Agrupamento que o local pertence.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Local_Unidade1_idx` (`Unidade_ID` ASC) VISIBLE,
  INDEX `fk_Local_SubAgregado1_idx` (`SubAgregado_ID` ASC) VISIBLE,
  INDEX `fk_Local_Cidade1_idx` (`Cidade_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Local_Unidade1`
    FOREIGN KEY (`Unidade_ID`)
    REFERENCES `iSet`.`Unidade` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Local_SubAgregado1`
    FOREIGN KEY (`SubAgregado_ID`)
    REFERENCES `iSet`.`SubAgregador` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Local_Cidade1`
    FOREIGN KEY (`Cidade_ID`)
    REFERENCES `iSet`.`Cidade` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre os locais onde serão oferecidos os atendimentos dos serviços.';


7 - 'nosfcj/iSet/api/src/models/Conteudo.ts':
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Conteudo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Conteudo` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define disponibilidade do conteúdo: 0 - indisponível, 1 - disponível',
  `descricao` TEXT NOT NULL COMMENT 'Descrição inicial do serviço disponível',
  `Servico_ID` INT NOT NULL COMMENT 'A que serviço estas informações pertencem.',
  `Local_ID` INT NOT NULL COMMENT 'A que local estas informações se referem.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Conteudo_Servico1_idx` (`Servico_ID` ASC) VISIBLE,
  INDEX `fk_Conteudo_Local1_idx` (`Local_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Conteudo_Servico1`
    FOREIGN KEY (`Servico_ID`)
    REFERENCES `iSet`.`Servico` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Conteudo_Local1`
    FOREIGN KEY (`Local_ID`)
    REFERENCES `iSet`.`Local` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre os serviços disponibilizados para o atendimento ao cidadão.';

8 - 'nosfcj/iSet/api/src/models/Rotulo.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Rotulo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Rotulo` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1,
  `rotulo` VARCHAR(255) NOT NULL COMMENT 'Rótulo com o título do pré-requisito que serão utilizados para padronizar conteúdo.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Essa tabela contém os rótulos descritos nos pré requisitos.';

9 - 'nosfcj/iSet/api/src/models/Requisito.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Requisito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Requisito` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Define o status de disponibilidade do conteúdo: 0 - indisponível, 1 - disponível. ',
  `conteudo` TEXT NOT NULL COMMENT 'Conteúdo de um pré requisito de um serviço',
  `Conteudo_ID` INT NOT NULL COMMENT 'A que conteúdo estes requisitos pertencem.',
  `Rotulo_ID` INT NOT NULL COMMENT 'Titulo do pré requisito, para efeitos de padronização de informação.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Requisito_Conteudo1_idx` (`Conteudo_ID` ASC) VISIBLE,
  INDEX `fk_Requisito_Rotulo1_idx` (`Rotulo_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Requisito_Conteudo1`
    FOREIGN KEY (`Conteudo_ID`)
    REFERENCES `iSet`.`Conteudo` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Requisito_Rotulo1`
    FOREIGN KEY (`Rotulo_ID`)
    REFERENCES `iSet`.`Rotulo` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre os vários pré-requisitos do serviços que serão oferecidos em serviços oferecidos ao cidadão.';

10 - 'nosfcj/iSet/api/src/models/Cidadao.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Cidadao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Cidadao` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `nome` TEXT NOT NULL COMMENT 'Nome do cidadão.',
  `cidade` TEXT NULL DEFAULT NULL COMMENT 'Cidade em que o cidadão mora.',
  `telefone` TEXT NULL DEFAULT NULL COMMENT 'Telefone usado pelo cidadão, podendo ter vários, separados por ponto e virgula. Telefones com * no início estarão disponíveis no WhatsApp.',
  `email` TEXT NULL DEFAULT NULL COMMENT 'Email do cidadão.',
  `dataHoraCadastro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Data e hora em que o cidadão foi cadastrado no sistema.',
  `prioridade` INT(1) NULL COMMENT 'Define a prioridade definitiva do cidadão: NULL - sem prioridade, 1 - idoso, 2 - patologia.',
  `dataNascimento` DATE NULL DEFAULT NULL COMMENT 'Data de nascimento é opcional. Mas sua ausência não dará a prerrogativa da idade no caso de senha prioritária.',
  `UltimoAcesso` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre o cidadão que procura atendimento de algum órgão.';


11 - 'nosfcj/iSet/api/src/models/Usuario.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Usuario` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Define status: 0 - inativo, 1 - ativo\n',
  `nivel` INT NOT NULL COMMENT 'Define o nivel de acesso do usuário do sistema: 0 - administrador, 1 - atendente de serviços, 2 - editor de serviços na carta, 3 - supervisor de atendimento, 4 - gestor do sistema. Iniciando do atendente, a ordem crescente herda o nível do anterior. o Administrador é o único que herda todos e faz registro de usuários do sistema. Demais funções, vide documentação. ',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome real do usuário do sistema',
  `Unidade_ID` INT NULL COMMENT 'ID do órgão na qual o usuário pertence - NULL são administradores, apenas.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Usuario_Unidade1_idx` (`Unidade_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Usuario_Unidade1`
    FOREIGN KEY (`Unidade_ID`)
    REFERENCES `iSet`.`Unidade` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela é referente aos dados dos usuários que participam da gestão de informação e atendimento.';


12 - 'nosfcj/iSet/api/src/models/Atendimento.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Atendimento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Atendimento` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` INT NOT NULL DEFAULT 0 COMMENT 'Status do atendimento que define o estado do atendimento dos serviços: 0 - Não finalizado, 1 - em atendimento, 2 - finalizado, 3 - aguardando retorno de atendimento adiado para outra data.',
  `tipo` INT NOT NULL COMMENT 'Define qual a prioridade na fila do atendimento. 0 - comum, 1 - prioridade, 2 - retorno. Quanto maior for o tipo, maior celeridade no atendimento. Quanto mais velho for o cidadão marcado como status 1, maior prioridade na fila de atendimento do tipo 1.',
  `senha` VARCHAR(11) NOT NULL COMMENT 'Senha do atendimento, no formato \'LLLLL-NNNNN\', onde a letras (llll) serão coletadas no nome do serviço e a numero relativo à ordem de cadastro de atendimento na fila.',
  `dataCadastro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Data em que o atendimento foi solicitado.',
  `dataFinal` TIMESTAMP NULL DEFAULT NULL COMMENT 'Data em que o serviço foi finalizado.',
  `Cidadao_ID` INT NOT NULL COMMENT 'Cidadão que solicitou o atendimento.',
  `Usuario_ID` INT NULL DEFAULT NULL COMMENT 'Usuário que fez a triagem, quando este existir; o cidadão pode solicitar o atendimento via Protocolo Portatil,  ficando NULL nesta situação.',
  `Local_ID` INT NULL DEFAULT NULL COMMENT 'Local onde foi registrado o cadastro do atendimento. Se NULL, ele foi cadastrado em um celular.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Atendimento_Cidadao1_idx` (`Cidadao_ID` ASC) VISIBLE,
  INDEX `fk_Atendimento_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Atendimento_Local1_idx` (`Local_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Atendimento_Cidadao1`
    FOREIGN KEY (`Cidadao_ID`)
    REFERENCES `iSet`.`Cidadao` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Atendimento_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Atendimento_Local1`
    FOREIGN KEY (`Local_ID`)
    REFERENCES `iSet`.`Local` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações de um atendimento gerado para oferecer um ou mais serviços ao cidadão. Pode ser inserido por um atendente de triagem ou cidadão pelo app do Protocolo Cidadão.';


13 - 'nosfcj/iSet/api/src/models/Guiche.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Guiche`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Guiche` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define o status do guichê: 0 - offline; 1 - online.',
  `identificacao` INT(3) ZEROFILL NOT NULL COMMENT 'Define o numero do guichê disponivel no local de atendimento.',
  `disponibilidade` INT NOT NULL DEFAULT 0 COMMENT 'Define situação de atividade, vindos de WebSocket, do atendimento de guiches: 0 - fora de atendimento, 1 - aguardando atendimento, 2 - em atendimento, 3 - atendimento suspenso',
  `Local_ID` INT NOT NULL COMMENT 'Local onde este guichê está atendendo.',
  `Usuario_ID` INT NULL COMMENT 'Qual usuário está atendendo neste guichê.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Guiche_Local1_idx` (`Local_ID` ASC) VISIBLE,
  INDEX `fk_Guiche_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Guiche_Local1`
    FOREIGN KEY (`Local_ID`)
    REFERENCES `iSet`.`Local` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Guiche_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Esta tabela contem informações dos guichês, usuários que estão a utilizar e sua disponibilidade em relação aos atendimentos dos serviços.';


14 - 'nosfcj/iSet/api/src/models/Acao.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Acao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Acao` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` INT NOT NULL DEFAULT 0 COMMENT 'Situação do atendimento deste serviço: 0 - Aguardando chamada (na fila); 1 - Em atendimento, 2 - Finalizado, 3 - Reagendado (com data futura), 4 - Aguardando confirmação (quando chegar a data agendada).',
  `posicao` INT NOT NULL COMMENT 'Posição do serviço na fila do atendimento.',
  `data` DATE NULL DEFAULT NULL COMMENT 'Data em que o atendimento foi atendido.',
  `horaInicio` TIME NULL DEFAULT NULL COMMENT 'Hora que marca o início do atendimento deste serviço.',
  `horaFim` TIME NULL DEFAULT NULL COMMENT 'Hora que marca o fim do atendimento deste serviço.',
  `anotacao` TEXT NULL DEFAULT NULL COMMENT 'Possível anotação do atendente neste serviço.',
  `Guiche_ID` INT NULL DEFAULT NULL COMMENT 'Guichê em que o serviço foi atendido.',
  `Usuario_ID` INT NULL COMMENT 'Qual Usuário executou esta Acao. Enquanto estiver NULL, esta Acao ainda não foi atendida.',
  `Servico_ID` INT NOT NULL COMMENT 'Define qual o Servico esta Acao pertence.',
  `Atendimento_ID` INT NOT NULL COMMENT 'Define a qual Atendimento esta Acao pertence.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Acao_Atendimento1_idx` (`Atendimento_ID` ASC) VISIBLE,
  INDEX `fk_Acao_Guiche1_idx` (`Guiche_ID` ASC) VISIBLE,
  INDEX `fk_Acao_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Acao_Servico1_idx` (`Servico_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Acao_Atendimento1`
    FOREIGN KEY (`Atendimento_ID`)
    REFERENCES `iSet`.`Atendimento` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Acao_Guiche1`
    FOREIGN KEY (`Guiche_ID`)
    REFERENCES `iSet`.`Guiche` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Acao_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Acao_Servico1`
    FOREIGN KEY (`Servico_ID`)
    REFERENCES `iSet`.`Servico` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre cada serviço de um atendimento. Ação finalizado somente por usuário atendente.';


15 - 'nosfcj/iSet/api/src/models/Avaliacao.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Avaliacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Avaliacao` (
  `Atendimento_ID` INT NOT NULL COMMENT 'Esse ID se refere ao atendimento dos serviços',
  `avaliacao` INT(1) NOT NULL COMMENT 'As estrelas se refere a avaliação do atendimento através de estrelas: 1 - péssimo , 2 - ruim , 3 - razoável,  4 - ótimo, 5 - perfeito.',
  `comentario` TEXT NULL DEFAULT NULL COMMENT 'Comentário, opcional, exclusivo do cidadão',
  INDEX `fk_Avaliacao_Atendimento1_idx` (`Atendimento_ID` ASC) VISIBLE,
  PRIMARY KEY (`Atendimento_ID`),
  CONSTRAINT `fk_Avaliacao_Atendimento1`
    FOREIGN KEY (`Atendimento_ID`)
    REFERENCES `iSet`.`Atendimento` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre a avaliação que o cidadão faz ao atendimento oferecido.';


16 - 'nosfcj/iSet/api/src/models/LoginUsuario.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`LoginUsuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`LoginUsuario` (
  `Usuario_ID` INT NOT NULL COMMENT 'Define a que usuário este login pertence.',
  `usuario` TEXT NOT NULL COMMENT 'ID que define o nome de usuário do sistema.',
  `senha` TEXT NOT NULL COMMENT 'Senha, codificada para privacidade',
  PRIMARY KEY (`Usuario_ID`),
  CONSTRAINT `fk_login_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela possui as informações de login no sistema.';


17 - 'nosfcj/iSet/api/src/models/LoginCidadao.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`LoginCidadao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`LoginCidadao` (
  `Cidadao_ID` INT NOT NULL COMMENT 'ID que define a que cidadão este login pertence.',
  `CPF` VARCHAR(32) NULL DEFAULT NULL COMMENT 'O nome de usuário que o cidadão irá utilizar - campo CPF deve ter conteudo completo do CPF, com pontos e traços e ser único.',
  `senha` VARCHAR(32) NULL DEFAULT NULL COMMENT 'Campo com senha, codificada. Se Default, deverá ser gerada pelo usuário no primeiro acesso.',
  `Auth0` JSON NULL DEFAULT NULL COMMENT 'JSON, com objeto disponibilizado por login via Auth0: GOV.br - 1; Facebook - 2, Google - 3; NULL - cadastro via login no sistema.',
  PRIMARY KEY (`Cidadao_ID`),
  INDEX `fk_LoginCidadao_Cidadao1_idx` (`Cidadao_ID` ASC) VISIBLE,
  UNIQUE INDEX `CPF_UNIQUE` (`CPF` ASC) VISIBLE,
  UNIQUE INDEX `Auth0_UNIQUE` (`Auth0` ASC) VISIBLE,
  CONSTRAINT `fk_LoginCidadao_Cidadao1`
    FOREIGN KEY (`Cidadao_ID`)
    REFERENCES `iSet`.`Cidadao` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Login para que cidadão cadastrado no sistema tenha acesso ao aplicativo de celular.';

18 - 'nosfcj/iSet/api/src/models/Auditoria.ts':
Nome da entidade mudará para 'nosfcj/iSet/api/src/models/AuditoriaInterna.ts':
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`AuditoriaInterna`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`AuditoriaInterna` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `detalhe` JSON NULL COMMENT 'Amostra que contém informações no formato JSON com informações de IP, localização e servidores na rede.',
  `timestamp` TIMESTAMP NULL COMMENT 'Data e hora da coleta das informações.',
  `Codigos` VARCHAR(15) NOT NULL COMMENT 'Qual código define essa ação.',
  `Usuario_ID` INT NOT NULL COMMENT 'Grava dados do usuário que gerou o evento gravado na auditoria.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Auditoria_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Auditoria_Codigos1_idx` (`Codigos` ASC) VISIBLE,
  CONSTRAINT `fk_Auditoria_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Auditoria_Codigos1`
    FOREIGN KEY (`Codigos`)
    REFERENCES `iSet`.`Codigos` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela que contém dados de erros, mudanças significativas nos  dados de usuários, locais, logins, atendimentos, cadastros de dispositivos e atividades incomuns.';


19 - 'nosfcj/iSet/api/src/models/Configuracoes.ts':
Nome da entidade mudará para 'nosfcj/iSet/api/src/models/Configuracao.ts':
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Configuracao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Configuracao` (
)
ENGINE = InnoDB
COMMENT = 'Contém as configurações pertinentes ao funcionamento do sistema.';


20 - 'nosfcj/iSet/api/src/models/Dispositivo.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Dispositivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Dispositivo` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define estado do dispositivo no sistema: 0 - inativo, 1 - ativo.',
  `tipo` INT(1) NOT NULL COMMENT 'O tipo define qual o tipo de dispositivo está permitido acessar o sistema: 1 - Web, 2 - Desktop, 3 - Portátil.',
  `chave` VARCHAR(45) NOT NULL COMMENT 'Chave em hash, que define navegador permitido para acessar o sistema.',
  `rotulo` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Nome que irá apelidar este dispositivo',
  `Usuario_ID` INT NULL COMMENT 'Define que usuário que cadastrou o dispositivo web/desktop no sistema.',
  `Cidadao_ID` INT NULL COMMENT 'Define que cidadão que cadastrou o app portátil no sistema.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Dispositivo_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Dispositivo_Cidadao1_idx` (`Cidadao_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Dispositivo_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Dispositivo_Cidadao1`
    FOREIGN KEY (`Cidadao_ID`)
    REFERENCES `iSet`.`Cidadao` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Contém as informações dos dispositivos com permição de acessar dados no sistema. Apenas Supervisores, Gestores e Administradores tem permissão de cadastro de dispositivos web/desktop. Cidadão só tem permissão para cadastrar dispositivos Portáteis.';


21 - 'nosfcj/iSet/api/src/models/Monitor.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Monitor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Monitor` (
  `Dispositivo_ID` INT NOT NULL COMMENT 'ID que define qual dispositivo cadastrado no sistema terá as configurações de Monitor de Senhas.',
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Define status do Monitor de Senhas: 0 - Inativo, 1 - Ativo.',
  `rotulo` VARCHAR(255) NOT NULL COMMENT 'Rótulo que irá nomear o Monitor de Senhas, para identificações.',
  `dataCadastro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Data do cadastro do Monitor de Senhas.',
  `Usuario_ID` INT NOT NULL COMMENT 'Usuário que cadastrou este Monitor de Senhas.',
  `SubAgregado_ID` INT NOT NULL COMMENT 'De quais orgãos pertencentes ao SubAgregador serão chamados os serviços.',
  PRIMARY KEY (`Dispositivo_ID`),
  INDEX `fk_Monitor_Dispositivo1_idx` (`Dispositivo_ID` ASC) VISIBLE,
  INDEX `fk_Monitor_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Monitor_SubAgregado1_idx` (`SubAgregado_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Monitor_Dispositivo1`
    FOREIGN KEY (`Dispositivo_ID`)
    REFERENCES `iSet`.`Dispositivo` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Monitor_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Monitor_SubAgregado1`
    FOREIGN KEY (`SubAgregado_ID`)
    REFERENCES `iSet`.`SubAgregador` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Contém cadastro dos monitores chamadores de senha e quais senhas cada um chamará.';


22 - 'nosfcj/iSet/api/src/models/Direcionamento.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Direcionamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Direcionamento` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define disposição: 0 - indisponível, 1 disponível.',
  `tipo` INT NOT NULL DEFAULT 1 COMMENT 'Define tipo de guichê: 1 - triagem, 2 - atendimento',
  `Guiche_ID` INT NOT NULL COMMENT 'A que guichê estas informações pertencem.',
  `Servico_ID` INT NOT NULL COMMENT 'Que serviço este guichê pode chamar.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Direcionamento_Guiche1_idx` (`Guiche_ID` ASC) VISIBLE,
  INDEX `fk_Direcionamento_Servico1_idx` (`Servico_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Direcionamento_Guiche1`
    FOREIGN KEY (`Guiche_ID`)
    REFERENCES `iSet`.`Guiche` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Direcionamento_Servico1`
    FOREIGN KEY (`Servico_ID`)
    REFERENCES `iSet`.`Servico` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela que agrega os serviços que podem ser chamados por um guichê';

Criar nova entidade
23 - 'nosfcj/iSet/api/src/models/Codigos.ts'
SQL: 
-- -----------------------------------------------------
-- Table `iSet`.`Codigos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Codigos` (
  `codigo` VARCHAR(15) NOT NULL COMMENT 'Código que define a ação a ser auditada.',
  `descricao` VARCHAR(200) NOT NULL COMMENT 'Contém descrição inteligível sobre a ação a ser auditada.',
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB
COMMENT = 'Esta tabela contém todos os códigos utilizados para a auditoria dos dados do sistema, bem como suas descrições.';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
