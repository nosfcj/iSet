-- MySQL Script generated by MySQL Workbench
-- Fri Mar 21 14:31:49 2025
-- Model: iSet-017    Version: 1.0
-- MySQL José Francisco Jardim

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema iSet
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema iSet
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `iSet` ;
USE `iSet` ;

-- -----------------------------------------------------
-- Table `iSet`.`Unidade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Unidade` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status atual do órgão no sistema: 0 - inativo, 1 - ativo. \nQuando uma Unidade for desativada, todos os Local relacionados a ele também serão desativados;\nQuando uma Unidade for desativada, todos os Servico relacionados a ele também serão desativados.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome do órgão no sistema.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre as unidades disponíveis, que podem ser órgão, departamentos e afins que estão disponíveis para  informações e/ou prestações de serviços.';


-- -----------------------------------------------------
-- Table `iSet`.`Servico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Servico` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Define status do serviço: 0 - desativado, 1 - disponível.\nQuando um Servico for desativado, todos os Conteudo relacionados a ele também serão desativados.',
  `titulo` VARCHAR(255) NOT NULL COMMENT 'Título do serviço disponibilizado',
  `rotulo` VARCHAR(5) NULL DEFAULT NULL COMMENT 'Rótulo, no formato \\\'LLLLL\\\', que irá compor a identificação da senha no ticket.',
  `Unidade_ID` INT NOT NULL COMMENT 'Unidade que este serviço pertence.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Servico_Unidade1_idx` (`Unidade_ID` ASC) VISIBLE,
  UNIQUE INDEX `rotulo_UNIQUE` (`rotulo` ASC) VISIBLE,
  CONSTRAINT `fk_Servico_Unidade1`
    FOREIGN KEY (`Unidade_ID`)
    REFERENCES `iSet`.`Unidade` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre os serviços que serão oferecidos ao cidadão.';


-- -----------------------------------------------------
-- Table `iSet`.`Agregador`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Agregador` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define situação do agregador de Local: 0 - desativado, 1 - ativado. \nQuando um Agregador estiver desativado, todos os SubAgregador relacionados a ele também serão desativados.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome do agregador de subAgregador.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações de agrupador de SubAgregados.';


-- -----------------------------------------------------
-- Table `iSet`.`SubAgregador`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`SubAgregador` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define situação do subagregador: 0 - desativado, 1 ativado. \nQuando um SubAgregador for desativado, todos Local relacionados a ele também serão desativados;\nQuando um SubAgregador for desativado, todos os  Monitor relacionados a ele também serão desativados.',
  `nome` TEXT NOT NULL COMMENT 'Nome do agregador',
  `Agregador_ID` INT NOT NULL COMMENT 'Agregador a qual este SubAgregador pertence.',
  PRIMARY KEY (`ID`),
  INDEX `fk_SubAgregado_Agregador1_idx` (`Agregador_ID` ASC) VISIBLE,
  CONSTRAINT `fk_SubAgregado_Agregador1`
    FOREIGN KEY (`Agregador_ID`)
    REFERENCES `iSet`.`Agregador` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contem informações sobre os agrupamentos pertencentes a um local agregador, como divisões de uma central de atendimento.';


-- -----------------------------------------------------
-- Table `iSet`.`Cidade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Cidade` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define a cidade no sistema: 0 - inativo, 1 ativo.',
  `nome` TEXT NOT NULL COMMENT 'Nome da cidade.',
  `Estado` TEXT NOT NULL COMMENT 'Nome do estado.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Cidade onde o Local está.';


-- -----------------------------------------------------
-- Table `iSet`.`Local`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Local` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define local de um serviço disponibilizados: 0 - desativado, 1- ativado. \nQuando um Local de uma Unidade for desativado, todas as Unidade relacionados a ele também serão desativados.\nQuando um Local for desativado, todos os Servico relacionados a ele também serão desativados.\nQuando um Local for desativado, todos os Direcionamento relacionados ao Servico também serão desativados;\nQuando um Local for desativado, todos os Conteudo relacionados ao Servico também serão desativados.\n',
  `endereco` TEXT NULL DEFAULT NULL COMMENT 'Endereço do local em que um serviço será disponibilizado para atendimento.',
  `linkMaps` TEXT NULL DEFAULT NULL COMMENT 'Link com endereço disponível no Google Maps.',
  `telefone` TEXT NULL DEFAULT NULL COMMENT 'Telefone usado pelo órgão nesse determinado local, podendo ter vários, separados por ponto e virgula. Telefones com * no início estarão disponíveis no WhatsApp.',
  `CEP` VARCHAR(15) NULL DEFAULT NULL COMMENT 'Contém o CEP do local de atendimento do serviço.',
  `Unidade_ID` INT NOT NULL COMMENT 'Local a qual a unidade pertence.',
  `Cidade_ID` INT NOT NULL COMMENT 'Cidade na qual o local está.',
  `SubAgregado_ID` INT NOT NULL COMMENT 'Agrupamento que o local pertence.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Local_Unidade1_idx` (`Unidade_ID` ASC) VISIBLE,
  INDEX `fk_Local_SubAgregado1_idx` (`SubAgregado_ID` ASC) VISIBLE,
  INDEX `fk_Local_Cidade1_idx` (`Cidade_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Local_Unidade1`
    FOREIGN KEY (`Unidade_ID`)
    REFERENCES `iSet`.`Unidade` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Local_SubAgregado1`
    FOREIGN KEY (`SubAgregado_ID`)
    REFERENCES `iSet`.`SubAgregador` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Local_Cidade1`
    FOREIGN KEY (`Cidade_ID`)
    REFERENCES `iSet`.`Cidade` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre os locais onde serão oferecidos os atendimentos dos serviços.';


-- -----------------------------------------------------
-- Table `iSet`.`Conteudo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Conteudo` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define disponibilidade do conteúdo: 0 - indisponível, 1 - disponível.',
  `descricao` TEXT NOT NULL COMMENT 'Descrição inicial do serviço disponível',
  `Servico_ID` INT NOT NULL COMMENT 'A que serviço estas informações pertencem.',
  `Local_ID` INT NOT NULL COMMENT 'A que local estas informações se referem.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Conteudo_Servico1_idx` (`Servico_ID` ASC) VISIBLE,
  INDEX `fk_Conteudo_Local1_idx` (`Local_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Conteudo_Servico1`
    FOREIGN KEY (`Servico_ID`)
    REFERENCES `iSet`.`Servico` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Conteudo_Local1`
    FOREIGN KEY (`Local_ID`)
    REFERENCES `iSet`.`Local` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre os serviços disponibilizados para o atendimento ao cidadão.';


-- -----------------------------------------------------
-- Table `iSet`.`Rotulo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Rotulo` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define disponibilidade do rótulo: 0 - indisponível, 1 - disponível;\nQuando o status de um Rotulo ficar indisponível, todos os Requisito também ficarão indisponíveis.',
  `rotulo` VARCHAR(255) NOT NULL COMMENT 'Rótulo com o título do pré-requisito que serão utilizados para padronizar conteúdo.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Essa tabela contém os rótulos descritos nos pré requisitos.';


-- -----------------------------------------------------
-- Table `iSet`.`Requisito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Requisito` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Define o status de disponibilidade do conteúdo: 0 - indisponível, 1 - disponível. ',
  `conteudo` TEXT NOT NULL COMMENT 'Conteúdo de um pré requisito de um serviço',
  `Conteudo_ID` INT NOT NULL COMMENT 'A que conteúdo estes requisitos pertencem.',
  `Rotulo_ID` INT NOT NULL COMMENT 'Titulo do pré requisito, para efeitos de padronização de informação.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Requisito_Conteudo1_idx` (`Conteudo_ID` ASC) VISIBLE,
  INDEX `fk_Requisito_Rotulo1_idx` (`Rotulo_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Requisito_Conteudo1`
    FOREIGN KEY (`Conteudo_ID`)
    REFERENCES `iSet`.`Conteudo` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Requisito_Rotulo1`
    FOREIGN KEY (`Rotulo_ID`)
    REFERENCES `iSet`.`Rotulo` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre os vários pré-requisitos do serviços que serão oferecidos em serviços oferecidos ao cidadão.';


-- -----------------------------------------------------
-- Table `iSet`.`Cidadao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Cidadao` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `nome` TEXT NOT NULL COMMENT 'Nome do cidadão.',
  `cidade` TEXT NULL DEFAULT NULL COMMENT 'Cidade em que o cidadão mora.',
  `telefone` TEXT NULL DEFAULT NULL COMMENT 'Telefone usado pelo cidadão, podendo ter vários, separados por ponto e virgula. Telefones com * no início estarão disponíveis no WhatsApp.',
  `email` TEXT NULL DEFAULT NULL COMMENT 'Email do cidadão.',
  `dataHoraCadastro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Data e hora em que o cidadão foi cadastrado no sistema.',
  `prioridade` INT(1) NULL DEFAULT NULL COMMENT 'Define a prioridade definitiva do cidadão: NULL - sem prioridade, 1 - idoso, 2 - patologia.',
  `dataNascimento` DATE NULL DEFAULT NULL COMMENT 'Data de nascimento é opcional. Mas sua ausência não dará a prerrogativa da idade no caso de senha prioritária.',
  `UltimoAcesso` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre o cidadão que procura atendimento de algum órgão.';


-- -----------------------------------------------------
-- Table `iSet`.`GrupoUsuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`GrupoUsuarios` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define situação do Grupo: 0 - inativo, 1 - ativo. \nQuando um Grupo for desativado, todos os Usuario relacionados a ele também serão desativados.',
  `nome` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `GrupoUsuario_UNIQUE` (`ID` ASC) VISIBLE,
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iSet`.`Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Usuario` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Define status: 0 - inativo, 1 - ativo\\n',
  `nivel` INT NOT NULL COMMENT 'Define o nivel de acesso do usuário do sistema: 0 - administrador, 1 - atendente de serviços, 2 - editor de serviços na carta, 3 - supervisor de atendimento, 4 - gestor do sistema. Iniciando do atendente, a ordem crescente herda o nível do anterior. o Administrador é o único que herda todos e faz registro de usuários do sistema. Demais funções, vide documentação. ',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome real do usuário do sistema',
  `Unidade_ID` INT NULL DEFAULT NULL COMMENT 'ID do órgão na qual o usuário pertence - NULL são administradores, apenas.',
  `Grupo_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Usuario_Unidade1_idx` (`Unidade_ID` ASC) VISIBLE,
  INDEX `fk_Usuario_GrupoUsuarios1_idx` (`Grupo_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Usuario_Unidade1`
    FOREIGN KEY (`Unidade_ID`)
    REFERENCES `iSet`.`Unidade` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Usuario_GrupoUsuarios1`
    FOREIGN KEY (`Grupo_ID`)
    REFERENCES `iSet`.`GrupoUsuarios` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela é referente aos dados dos usuários que participam da gestão de informação e atendimento.';


-- -----------------------------------------------------
-- Table `iSet`.`Atendimento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Atendimento` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `status` INT NOT NULL DEFAULT 0 COMMENT 'Status do atendimento que define o estado do atendimento dos serviços: 0 - Não finalizado, 1 - em atendimento, 2 - finalizado, 3 - aguardando retorno de atendimento adiado para outra data.',
  `tipo` INT NOT NULL COMMENT 'Define qual a prioridade na fila do atendimento. 0 - comum, 1 - prioridade, 2 - retorno. Quanto maior for o tipo, maior celeridade no atendimento. Quanto mais velho for o cidadão marcado como status 1, maior prioridade na fila de atendimento do tipo 1.',
  `senha` VARCHAR(11) NOT NULL COMMENT 'Senha do atendimento, no formato \\\'LLLLL-NNNNN\\\', onde a letras (llll) serão coletadas no nome do serviço e a numero relativo à ordem de cadastro de atendimento na fila.',
  `dataCadastro` TIMESTAMP NOT NULL COMMENT 'Data em que o atendimento foi solicitado.',
  `dataFinal` TIMESTAMP NULL DEFAULT NULL COMMENT 'Data em que o serviço foi finalizado.',
  `Cidadao_ID` BIGINT NOT NULL COMMENT 'Cidadão que solicitou o atendimento.',
  `Usuario_ID` INT NULL DEFAULT NULL COMMENT 'Usuário que fez a triagem, quando este existir; o cidadão pode solicitar o atendimento via Protocolo Portatil,  ficando NULL nesta situação.',
  `Local_ID` INT NULL DEFAULT NULL COMMENT 'Local onde foi registrado o cadastro do atendimento. Se NULL, ele foi cadastrado em um celular.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Atendimento_Cidadao1_idx` (`Cidadao_ID` ASC) VISIBLE,
  INDEX `fk_Atendimento_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Atendimento_Local1_idx` (`Local_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Atendimento_Cidadao1`
    FOREIGN KEY (`Cidadao_ID`)
    REFERENCES `iSet`.`Cidadao` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Atendimento_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Atendimento_Local1`
    FOREIGN KEY (`Local_ID`)
    REFERENCES `iSet`.`Local` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações de um atendimento gerado para oferecer um ou mais serviços ao cidadão. Pode ser inserido por um atendente de triagem ou cidadão pelo app do Protocolo Cidadão.';


-- -----------------------------------------------------
-- Table `iSet`.`Guiche`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Guiche` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define o status do guichê: 0 - desativado, 1 - ativado.\nQuando um Guiche for desativado, todos os Direcionamento relacionados a ele também serão desativados.',
  `identificacao` INT(3) ZEROFILL NOT NULL COMMENT 'Define o numero do guichê disponivel no local de atendimento.',
  `disponibilidade` INT NOT NULL DEFAULT 0 COMMENT 'Define situação de atividade, vindos de WebSocket, do atendimento de guiches: 0 - fora de atendimento, 1 - aguardando atendimento, 2 - em atendimento, 3 - atendimento suspenso',
  `Local_ID` INT NOT NULL COMMENT 'Local onde este guichê está atendendo.',
  `Usuario_ID` INT NULL DEFAULT NULL COMMENT 'Qual usuário está atendendo neste guichê.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Guiche_Local1_idx` (`Local_ID` ASC) VISIBLE,
  INDEX `fk_Guiche_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Guiche_Local1`
    FOREIGN KEY (`Local_ID`)
    REFERENCES `iSet`.`Local` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Guiche_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Esta tabela contem informações dos guichês, usuários que estão a utilizar e sua disponibilidade em relação aos atendimentos dos serviços.';


-- -----------------------------------------------------
-- Table `iSet`.`Acao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Acao` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `status` INT NOT NULL DEFAULT 0 COMMENT 'Situação do atendimento deste serviço: 0 - Aguardando chamada (na fila); 1 - Em atendimento, 2 - Finalizado, 3 - Reagendado (com data futura), 4 - Aguardando confirmação (quando chegar a data agendada).',
  `posicao` INT NOT NULL COMMENT 'Posição do serviço na fila do atendimento.',
  `data` DATE NULL DEFAULT NULL COMMENT 'Data em que o atendimento foi atendido.',
  `horaInicio` TIME NULL DEFAULT NULL COMMENT 'Hora que marca o início do atendimento deste serviço.',
  `horaFim` TIME NULL DEFAULT NULL COMMENT 'Hora que marca o fim do atendimento deste serviço.',
  `anotacao` TEXT NULL DEFAULT NULL COMMENT 'Possível anotação do atendente neste serviço.',
  `Guiche_ID` INT NULL DEFAULT NULL COMMENT 'Guichê em que o serviço foi atendido.',
  `Usuario_ID` INT NULL DEFAULT NULL COMMENT 'Qual Usuário executou esta Acao. Enquanto estiver NULL, esta Acao ainda não foi atendida.',
  `Servico_ID` INT NOT NULL COMMENT 'Define qual o Servico esta Acao pertence.',
  `Atendimento_ID` BIGINT NOT NULL COMMENT 'Define a qual Atendimento esta Acao pertence.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Acao_Atendimento1_idx` (`Atendimento_ID` ASC) VISIBLE,
  INDEX `fk_Acao_Guiche1_idx` (`Guiche_ID` ASC) VISIBLE,
  INDEX `fk_Acao_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Acao_Servico1_idx` (`Servico_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Acao_Atendimento1`
    FOREIGN KEY (`Atendimento_ID`)
    REFERENCES `iSet`.`Atendimento` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Acao_Guiche1`
    FOREIGN KEY (`Guiche_ID`)
    REFERENCES `iSet`.`Guiche` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Acao_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Acao_Servico1`
    FOREIGN KEY (`Servico_ID`)
    REFERENCES `iSet`.`Servico` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre cada serviço de um atendimento. Ação finalizado somente por usuário atendente.';


-- -----------------------------------------------------
-- Table `iSet`.`Avaliacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Avaliacao` (
  `Atendimento_ID` BIGINT UNSIGNED NOT NULL COMMENT 'Esse ID se refere ao atendimento dos serviços',
  `avaliacao` INT(1) NOT NULL COMMENT 'As estrelas se refere a avaliação do atendimento através de estrelas: 1 - péssimo , 2 - ruim , 3 - razoável,  4 - ótimo, 5 - perfeito.',
  `comentario` TEXT NULL DEFAULT NULL COMMENT 'Comentário, opcional, exclusivo do cidadão',
  INDEX `fk_Avaliacao_Atendimento1_idx` (`Atendimento_ID` ASC) VISIBLE,
  PRIMARY KEY (`Atendimento_ID`),
  CONSTRAINT `fk_Avaliacao_Atendimento1`
    FOREIGN KEY (`Atendimento_ID`)
    REFERENCES `iSet`.`Atendimento` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela contém informações sobre a avaliação que o cidadão faz ao atendimento oferecido.';


-- -----------------------------------------------------
-- Table `iSet`.`LoginUsuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`LoginUsuario` (
  `Usuario_ID` INT UNSIGNED NOT NULL,
  `usuario` TEXT NOT NULL COMMENT 'ID que define o nome de usuário do sistema.',
  `senha` TEXT NOT NULL COMMENT 'Senha, codificada para privacidade',
  PRIMARY KEY (`Usuario_ID`),
  UNIQUE INDEX `Usuario_ID_UNIQUE` (`Usuario_ID` ASC) VISIBLE,
  CONSTRAINT `fk_LoginUsuario_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Essa tabela possui as informações de login no sistema.';


-- -----------------------------------------------------
-- Table `iSet`.`LoginCidadao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`LoginCidadao` (
  `Cidadao_ID` BIGINT NOT NULL,
  `CPF` VARCHAR(32) NULL DEFAULT NULL COMMENT 'O nome de usuário que o cidadão irá utilizar - campo CPF deve ter conteudo completo do CPF, com pontos e traços e ser único.',
  `senha` VARCHAR(32) NULL DEFAULT NULL COMMENT 'Campo com senha, codificada. Se Default, deverá ser gerada pelo usuário no primeiro acesso.',
  `Auth0` JSON NULL DEFAULT NULL COMMENT 'JSON, com objeto disponibilizado por login via Auth0: GOV.br - 1; Facebook - 2, Google - 3; NULL - cadastro via login no sistema.',
  UNIQUE INDEX `CPF_UNIQUE` (`CPF` ASC) VISIBLE,
  UNIQUE INDEX `Auth0_UNIQUE` (`Auth0` ASC) VISIBLE,
  PRIMARY KEY (`Cidadao_ID`),
  UNIQUE INDEX `Cidadao_ID_UNIQUE` (`Cidadao_ID` ASC) VISIBLE,
  CONSTRAINT `fk_LoginCidadao_Cidadao1`
    FOREIGN KEY (`Cidadao_ID`)
    REFERENCES `iSet`.`Cidadao` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Login para que cidadão cadastrado no sistema tenha acesso ao aplicativo de celular.';


-- -----------------------------------------------------
-- Table `iSet`.`AuditoriaInterna`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`AuditoriaInterna` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `informacao` JSON NULL DEFAULT NULL COMMENT 'Amostra que contém informações no formato JSON com informações de IP, localização e servidores na rede.',
  `timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Data e hora da coleta das informações.',
  `Usuario_ID` INT NOT NULL COMMENT 'Grava dados do usuário que gerou o evento gravado na auditoria.',
  `Codigo_ID` INT NOT NULL,
  PRIMARY KEY (`ID`, `Codigo_ID`),
  INDEX `fk_AuditoriaInterna_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `idx_auditoria_timestamp_codigo` (`timestamp` ASC) VISIBLE,
  INDEX `fk_AuditoriaInterna_Codigo1_idx` (`Codigo_ID` ASC) VISIBLE,
  CONSTRAINT `fk_AuditoriaInterna_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AuditoriaInterna_Codigo1`
    FOREIGN KEY (`Codigo_ID`)
    REFERENCES `iSet`.`Codigo` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela que contém dados de erros, mudanças significativas nos  dados de usuários, locais, logins, atendimentos, cadastros de dispositivos e atividades incomuns.'

-- -----------------------------------------------------
-- Table `iSet`.`Dispositivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Dispositivo` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status: 0-inativo, 1-ativo.',
  `tipo` INT(1) NOT NULL DEFAULT 1 COMMENT 'Tipo: 1-Web, 2-Desktop, 3-Portátil',
  `chave` VARCHAR(45) NOT NULL COMMENT 'Hash que identifica o navegador/dispositivo autorizado',
  `rotulo` VARCHAR(45) NULL COMMENT 'Nome de identificação do dispositivo',
  `Usuario_ID` INT NULL COMMENT 'ID do usuário que cadastrou o dispositivo web/desktop',
  `Cidadao_ID` BIGINT NULL COMMENT 'ID do cidadão que cadastrou o dispositivo portátil',
  PRIMARY KEY (`ID`),
  INDEX `fk_Dispositivo_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Dispositivo_Cidadao1_idx` (`Cidadao_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Dispositivo_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Dispositivo_Cidadao1`
    FOREIGN KEY (`Cidadao_ID`)
    REFERENCES `iSet`.`Cidadao` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Informações do dispositivo com alguma permissão de acesso';


-- -----------------------------------------------------
-- Table `iSet`.`Monitor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Monitor` (
  `Dispositivo_ID` BIGINT NOT NULL COMMENT 'ID que define qual dispositivo cadastrado no sistema terá as configurações de Monitor de Senhas.',
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Define status do Monitor de Senhas: 0 - Inativo, 1 - Ativo.\nQuando um Monitor for desativado, o Dispositivo relacionado a ele também será desativados.',
  `rotulo` VARCHAR(255) NOT NULL COMMENT 'Rótulo que irá nomear o Monitor de Senhas, para identificações.',
  `dataCadastro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Data do cadastro do Monitor de Senhas.',
  `Usuario_ID` INT NOT NULL COMMENT 'Usuário que cadastrou este Monitor de Senhas.',
  `SubAgregado_ID` INT NOT NULL COMMENT 'De quais orgãos pertencentes ao SubAgregador serão chamados os serviços.',
  PRIMARY KEY (`Dispositivo_ID`),
  INDEX `fk_Monitor_Dispositivo1_idx` (`Dispositivo_ID` ASC) VISIBLE,
  INDEX `fk_Monitor_Usuario1_idx` (`Usuario_ID` ASC) VISIBLE,
  INDEX `fk_Monitor_SubAgregado1_idx` (`SubAgregado_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Monitor_Dispositivo1`
    FOREIGN KEY (`Dispositivo_ID`)
    REFERENCES `iSet`.`Dispositivo` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Monitor_Usuario1`
    FOREIGN KEY (`Usuario_ID`)
    REFERENCES `iSet`.`Usuario` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Monitor_SubAgregado1`
    FOREIGN KEY (`SubAgregado_ID`)
    REFERENCES `iSet`.`SubAgregador` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Contém cadastro dos monitores chamadores de senha e quais senhas cada um chamará.';


-- -----------------------------------------------------
-- Table `iSet`.`Direcionamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Direcionamento` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT 'Status que define disposição: 0 - indisponível, 1 disponível.',
  `tipo` INT NOT NULL DEFAULT 1 COMMENT 'Define tipo de guichê: 1 - triagem, 2 - atendimento',
  `Guiche_ID` INT NOT NULL COMMENT 'A que guichê estas informações pertencem.',
  `Servico_ID` INT NOT NULL COMMENT 'Que serviço este guichê pode chamar.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Direcionamento_Guiche1_idx` (`Guiche_ID` ASC) VISIBLE,
  INDEX `fk_Direcionamento_Servico1_idx` (`Servico_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Direcionamento_Guiche1`
    FOREIGN KEY (`Guiche_ID`)
    REFERENCES `iSet`.`Guiche` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Direcionamento_Servico1`
    FOREIGN KEY (`Servico_ID`)
    REFERENCES `iSet`.`Servico` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela que agrega os serviços que podem ser chamados por um guichê';


-- -----------------------------------------------------
-- Table `iSet`.`Codigo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`Codigo` (
  `ID` INT NOT NULL,
  `descricao` VARCHAR(200) NOT NULL COMMENT 'Contém descrição inteligível sobre a ação a ser auditada.',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Esta tabela contém todos os códigos utilizados para a auditoria dos dados do sistema, bem como suas descrições.'

-- -----------------------------------------------------
-- Tabela de cache para consultas frequentes da fila de atendimento
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iSet`.`FilaCache` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Atendimento_ID` BIGINT NOT NULL,
  `prioridade` INT NOT NULL,
  `senha` VARCHAR(11) NOT NULL,
  `timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Local_ID` INT NOT NULL,
  `SubAgregado_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_filacache_local` (`Local_ID` ASC) VISIBLE,
  INDEX `idx_filacache_prioridade` (`prioridade` ASC) VISIBLE)
ENGINE = MEMORY
COMMENT = 'Tabela de cache em memória para alta performance na consulta de filas';
-- Linha 543 (antes de SET SQL_MODE=@OLD_SQL_MODE;)

-- -----------------------------------------------------
-- Otimizações de desempenho para o sistema iSet 
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Índices estratégicos para tabelas de alto acesso
-- -----------------------------------------------------

-- Índices para Atendimento (melhoria de consultas de fila)
ALTER TABLE `iSet`.`Atendimento` ADD INDEX `idx_atendimento_status_tipo_data` (`status`, `tipo`, `dataCadastro`);
ALTER TABLE `iSet`.`Atendimento` ADD INDEX `idx_atendimento_senha` (`senha`);

-- Índices para Acao (melhoria de consulta por status de serviços)
ALTER TABLE `iSet`.`Acao` ADD INDEX `idx_acao_status_data` (`status`, `data`);
ALTER TABLE `iSet`.`Acao` ADD INDEX `idx_acao_atendimento_servico` (`Atendimento_ID`, `Servico_ID`);

-- Índice para busca de cidadãos por nome
ALTER TABLE `iSet`.`Cidadao` ADD INDEX `idx_cidadao_nome` ((SUBSTRING(nome, 1, 50)));
ALTER TABLE `iSet`.`Cidadao` ADD INDEX `idx_cidadao_prioridade` (`prioridade`, `dataNascimento`);

-- Índices para otimizar autenticação
ALTER TABLE `iSet`.`LoginCidadao` ADD INDEX `idx_logincidadao_cpf` (`CPF`);
ALTER TABLE `iSet`.`LoginCidadao` ADD INDEX `idx_logincidadao_auth0` ((JSON_EXTRACT(Auth0, '$.id')));

-- Índices para melhorar desempenho de auditoria e logs
ALTER TABLE `iSet`.`AuditoriaInterna` ADD INDEX `idx_auditoria_timestamp_codigo` (`timestamp`, `Codigo`);

-- Índices para consultas de locais e serviços
ALTER TABLE `iSet`.`Monitor` ADD INDEX `idx_monitor_status_subagregador` (`status`, `SubAgregado_ID`);
ALTER TABLE `iSet`.`Servico` ADD INDEX `idx_servico_status_unidade` (`status`, `Unidade_ID`);
ALTER TABLE `iSet`.`Local` ADD INDEX `idx_local_status_cidade` (`status`, `Cidade_ID`);

-- -----------------------------------------------------
-- Configuração de tabelas para melhor compressão/cache
-- -----------------------------------------------------

-- Otimização para tabela de Atendimentos (alta consulta)
ALTER TABLE `iSet`.`Atendimento` ROW_FORMAT=DYNAMIC;

-- Compressão para tabelas de grande volume de dados
ALTER TABLE `iSet`.`AuditoriaInterna` ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;
ALTER TABLE `iSet`.`Cidadao` ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=4;

-- -----------------------------------------------------
-- Particionamento para tabelas de histórico
-- -----------------------------------------------------

-- Particionamento da tabela Atendimento por data
ALTER TABLE `iSet`.`Atendimento` 
PARTITION BY RANGE (TO_DAYS(dataCadastro)) (
    PARTITION p_2023 VALUES LESS THAN (TO_DAYS('2024-01-01')),
    PARTITION p_2024 VALUES LESS THAN (TO_DAYS('2025-01-01')), 
    PARTITION p_2025 VALUES LESS THAN (TO_DAYS('2026-01-01')),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Particionamento da tabela AuditoriaInterna por data
ALTER TABLE `iSet`.`AuditoriaInterna` 
PARTITION BY RANGE (TO_DAYS(timestamp)) (
    PARTITION p_2023 VALUES LESS THAN (TO_DAYS('2024-01-01')),
    PARTITION p_2024 VALUES LESS THAN (TO_DAYS('2025-01-01')),
    PARTITION p_2025 VALUES LESS THAN (TO_DAYS('2026-01-01')),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- -----------------------------------------------------
-- Views para otimizar consultas frequentes
-- -----------------------------------------------------

-- View para fila de atendimentos (otimiza consultas para monitores)
CREATE OR REPLACE VIEW `iSet`.`v_fila_atendimento` AS
SELECT 
    a.ID as atendimento_id,
    a.senha,
    a.tipo,
    a.dataCadastro,
    c.nome as cidadao_nome,
    s.titulo as servico_titulo,
    s.rotulo as servico_rotulo,
    ac.status as acao_status,
    g.identificacao as guiche
FROM 
    `iSet`.`Atendimento` a
JOIN 
    `iSet`.`Cidadao` c ON a.Cidadao_ID = c.ID
JOIN 
    `iSet`.`Acao` ac ON a.ID = ac.Atendimento_ID
JOIN 
    `iSet`.`Servico` s ON ac.Servico_ID = s.ID
LEFT JOIN
    `iSet`.`Guiche` g ON ac.Guiche_ID = g.ID
WHERE 
    a.status IN (0, 1) AND ac.status IN (0, 1)
ORDER BY 
    ac.status ASC, a.tipo DESC, a.dataCadastro ASC;

-- View para monitores ativos (otimiza consultas para painéis)
CREATE OR REPLACE VIEW `iSet`.`v_monitores_ativos` AS
SELECT 
    m.Dispositivo_ID,
    m.rotulo as monitor_nome,
    d.status as dispositivo_status,
    s.ID as subagregador_id,
    s.nome as subagregador_nome,
    a.nome as agregador_nome,
    l.ID as local_id
FROM 
    `iSet`.`Monitor` m
JOIN 
    `iSet`.`Dispositivo` d ON m.Dispositivo_ID = d.ID
JOIN 
    `iSet`.`SubAgregador` s ON m.SubAgregado_ID = s.ID
JOIN 
    `iSet`.`Agregador` a ON s.Agregador_ID = a.ID
JOIN 
    `iSet`.`Local` l ON l.SubAgregado_ID = s.ID
WHERE 
    m.status = 1 AND d.status = 1;

-- View para status de guichês (otimiza consultas de disponibilidade)
CREATE OR REPLACE VIEW `iSet`.`v_guiche_servico` AS
SELECT
    g.ID as guiche_id,
    g.identificacao,
    g.disponibilidade,
    g.Local_ID,
    l.endereco as local_endereco,
    s.ID as servico_id,
    s.titulo as servico_titulo,
    s.rotulo as servico_rotulo,
    u.nome as usuario_nome
FROM
    `iSet`.`Guiche` g
JOIN
    `iSet`.`Local` l ON g.Local_ID = l.ID
JOIN
    `iSet`.`Direcionamento` d ON g.ID = d.Guiche_ID
JOIN
    `iSet`.`Servico` s ON d.Servico_ID = s.ID
LEFT JOIN
    `iSet`.`Usuario` u ON g.Usuario_ID = u.ID
WHERE
    g.status = 1 AND d.status = 1 AND s.status = 1;

-- -----------------------------------------------------
-- Stored Procedures para operações frequentes
-- -----------------------------------------------------

DELIMITER //

-- Procedure para buscar o próximo atendimento da fila
CREATE PROCEDURE `iSet`.`sp_proximo_atendimento` (IN p_guiche_id INT, IN p_servico_id INT)
BEGIN
    DECLARE v_atendimento_id INT;
    
    SELECT a.ID INTO v_atendimento_id
    FROM `iSet`.`Atendimento` a
    JOIN `iSet`.`Acao` ac ON a.ID = ac.Atendimento_ID
    WHERE ac.Servico_ID = p_servico_id
      AND ac.status = 0
      AND a.status = 0
    ORDER BY a.tipo DESC, a.dataCadastro ASC
    LIMIT 1;
    
    IF v_atendimento_id IS NOT NULL THEN
        UPDATE `iSet`.`Acao` 
        SET status = 1, Guiche_ID = p_guiche_id, 
            horaInicio = CURRENT_TIME(), data = CURRENT_DATE
        WHERE Atendimento_ID = v_atendimento_id
          AND Servico_ID = p_servico_id
          AND status = 0;
          
        UPDATE `iSet`.`Atendimento` 
        SET status = 1
        WHERE ID = v_atendimento_id;
    END IF;
    
    SELECT v_atendimento_id;
END//

-- Procedure para finalizar atendimento (reduz tráfego e operações)
CREATE PROCEDURE `iSet`.`sp_finalizar_atendimento` (
    IN p_atendimento_id INT, 
    IN p_acao_id INT,
    IN p_usuario_id INT
)
BEGIN
    UPDATE `iSet`.`Acao` 
    SET status = 2, 
        horaFim = CURRENT_TIME(),
        Usuario_ID = p_usuario_id
    WHERE ID = p_acao_id;
    
    -- Verifica se todas as ações foram finalizadas
    IF (SELECT COUNT(*) FROM `iSet`.`Acao` 
        WHERE Atendimento_ID = p_atendimento_id AND status < 2) = 0 
    THEN
        UPDATE `iSet`.`Atendimento` 
        SET status = 2, 
            dataFinal = CURRENT_TIMESTAMP
        WHERE ID = p_atendimento_id;
    END IF;
END//

-- Procedure para consulta de atendimentos por período (reduz consultas complexas)
CREATE PROCEDURE `iSet`.`sp_relatorio_atendimentos` (
    IN p_data_inicial DATE,
    IN p_data_final DATE,
    IN p_local_id INT,
    IN p_status INT
)
BEGIN
    SELECT 
        a.ID, a.status, a.senha, a.dataCadastro, a.dataFinal,
        c.nome as cidadao_nome,
        GROUP_CONCAT(DISTINCT s.titulo SEPARATOR ', ') as servicos,
        COUNT(DISTINCT ac.ID) as total_servicos,
        SUM(CASE WHEN ac.status = 2 THEN 1 ELSE 0 END) as servicos_concluidos
    FROM 
        `iSet`.`Atendimento` a
    JOIN 
        `iSet`.`Cidadao` c ON a.Cidadao_ID = c.ID
    JOIN 
        `iSet`.`Acao` ac ON a.ID = ac.Atendimento_ID
    JOIN 
        `iSet`.`Servico` s ON ac.Servico_ID = s.ID
    WHERE 
        DATE(a.dataCadastro) BETWEEN p_data_inicial AND p_data_final
        AND (p_local_id IS NULL OR a.Local_ID = p_local_id)
        AND (p_status IS NULL OR a.status = p_status)
    GROUP BY 
        a.ID
    ORDER BY 
        a.dataCadastro DESC;
END//

DELIMITER ;

-- -----------------------------------------------------
-- Eventos para manutenção automática
-- -----------------------------------------------------

DELIMITER //

-- Evento para limpar atendimentos antigos não finalizados
CREATE EVENT `iSet`.`evt_limpa_atendimentos_nao_finalizados`
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
BEGIN
    UPDATE `iSet`.`Atendimento` 
    SET status = 2, dataFinal = CURRENT_TIMESTAMP
    WHERE status IN (0, 1) 
      AND dataCadastro < DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);
      
    UPDATE `iSet`.`Acao`
    SET status = 2
    WHERE status IN (0, 1)
      AND Atendimento_ID IN (
        SELECT ID FROM `iSet`.`Atendimento`
        WHERE dataCadastro < DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY)
        AND status = 2
      );
END//

-- Evento para otimização periódica de tabelas
CREATE EVENT `iSet`.`evt_otimiza_tabelas`
ON SCHEDULE EVERY 1 WEEK
STARTS CURRENT_TIMESTAMP + INTERVAL 1 DAY
DO
BEGIN
    OPTIMIZE TABLE `iSet`.`Atendimento`, `iSet`.`Acao`, `iSet`.`AuditoriaInterna`;
END//

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
